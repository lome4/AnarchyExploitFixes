package me.moomoo.anarchyexploitfixes.patches;

import me.moomoo.anarchyexploitfixes.Main;
import org.bukkit.Chunk;
import org.bukkit.Material;
import org.bukkit.block.Block;
import org.bukkit.block.Container;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockPlaceEvent;

public class ChunkBan implements Listener {
    private final Main plugin;

    public ChunkBan(Main plugin) {
        this.plugin = plugin;
    }

    @EventHandler
    private void onBlockPlace(BlockPlaceEvent evt) {
        FileConfiguration config = plugin.getConfig();
        // ik this should be a switch statement, I do not feel like doing it. Make a pull request if you wish :)
        if (config.getBoolean("PreventChunkBan")) {
            Chunk c = evt.getBlock().getChunk();
            Block b = evt.getBlock();
            if (b.getType() == Material.ENCHANTMENT_TABLE) {
                if (plugin.checkChunk(Material.ENCHANTMENT_TABLE, c) > config.getInt("MaxEnchantmentTablePerChunk")) {
                    evt.setCancelled(true);
                }
            } else {
                if (b.getType() == Material.ENDER_CHEST) {
                    if (plugin.checkChunk(Material.ENDER_CHEST, c) > config.getInt("MaxEnderchestPerChunk")) {
                        evt.setCancelled(true);
                    }
                } else {
                    if (b.getType().equals(Material.HOPPER)) {
                        if (plugin.checkChunk(b.getType(), c) > config.getInt("MaxHopperPerChunk")) {
                            evt.setCancelled(true);
                        }
                    } else {
                        if (b.getState() instanceof Container) {
                            if (plugin.checkChunk(b.getType(), c) > config.getInt("MaxContainerPerChunk")) {
                                evt.setCancelled(true);
                            }
                        } else {
                            if (b.getType() == Material.WALL_SIGN || b.getType() == Material.SIGN_POST) {
                                if (plugin.checkChunk(b.getType(), c) > config.getInt("MaxSignPerChunk")) {
                                    evt.setCancelled(true);
                                }
                            } else {
                                if (b.getType() == Material.SLIME_BLOCK) {
                                    if (plugin.checkChunk(b.getType(), c) > config.getInt("MaxSlimePerChunk")) {
                                        evt.setCancelled(true);
                                    }
                                } else {
                                    if (b.getType() == Material.BEACON) {
                                        if (plugin.checkChunk(b.getType(), c) > config.getInt("MaxBeaconPerChunk")) {
                                            evt.setCancelled(true);
                                        }
                                    } else {
                                        if ((b.getType().equals(Material.PISTON_BASE) || b.getType().equals(Material.PISTON_STICKY_BASE)) && plugin.checkChunk(b.getType(), c) > config.getInt("MaxPistonPerChunk")) {
                                            evt.setCancelled(true);
                                        } else {
                                            if ((b.getType().equals(Material.ITEM_FRAME)) && plugin.checkChunk(b.getType(), c) > config.getInt("MaxItemframesPerChunk")) {
                                                evt.setCancelled(true);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}
